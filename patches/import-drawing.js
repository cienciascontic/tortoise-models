// Generated by CoffeeScript 1.9.1
(function() {
  var MyAgentStreamController, images,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.drawings = [];

  images = {};

  window.AgentStreamController = MyAgentStreamController = (function(superClass) {
    extend(MyAgentStreamController, superClass);

    function MyAgentStreamController() {
      var triggerRepaint;
      MyAgentStreamController.__super__.constructor.apply(this, arguments);
      triggerRepaint = (function(_this) {
        return function() {
          return _this.repaint();
        };
      })(this);
      this.patchDrawer.loadImage = function(src) {
        if (images[src] != null) {
          return images[src];
        }
        return new Promise(function(resolve, reject) {
          var img;
          img = new Image();
          img.addEventListener("load", function() {
            images[src] = img;
            return resolve(img);
          }, false);
          return img.src = src;
        });
      };
      this.patchDrawer.drawScaledImage = function(src) {
        var canvas, ctx, hRatio, img, ratio, shiftX, shiftY, vRatio;
        img = this.loadImage(src);
        if (img.then != null) {
          return img.then(function(img) {
            return triggerRepaint();
          });
        } else {
          canvas = this.view.canvas;
          ctx = this.view.ctx;
          hRatio = canvas.width / img.width;
          vRatio = canvas.height / img.height;
          ratio = Math.min(hRatio, vRatio);
          shiftX = (canvas.width - img.width * ratio) / 2;
          shiftY = (canvas.height - img.height * ratio) / 2;
          return ctx.drawImage(img, shiftX, shiftY, img.width * ratio, img.height * ratio);
        }
      };
      this.patchDrawer.repaintOrig = this.patchDrawer.repaint;
      this.patchDrawer.repaint = function(model) {
        var i, len, ref, ret, src;
        ret = this.repaintOrig(model);
        ref = window.drawings;
        for (i = 0, len = ref.length; i < len; i++) {
          src = ref[i];
          this.drawScaledImage(src);
        }
        return ret;
      };
    }

    return MyAgentStreamController;

  })(window.AgentStreamController);

}).call(this);
